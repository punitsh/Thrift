/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.service.domain;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


public class Employee implements org.apache.thrift.TBase<Employee, Employee._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Employee");

  private static final org.apache.thrift.protocol.TField EMP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("empId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OP_FIELD_DESC = new org.apache.thrift.protocol.TField("op", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DOB_FIELD_DESC = new org.apache.thrift.protocol.TField("dob", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PERMANENT_FIELD_DESC = new org.apache.thrift.protocol.TField("permanent", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EmployeeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EmployeeTupleSchemeFactory());
  }

  public int empId; // required
  public String name; // required
  /**
   * 
   * @see GRADE
   */
  public GRADE op; // required
  public String dob; // required
  public boolean permanent; // required
  public String comment; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EMP_ID((short)1, "empId"),
    NAME((short)2, "name"),
    /**
     * 
     * @see GRADE
     */
    OP((short)3, "op"),
    DOB((short)4, "dob"),
    PERMANENT((short)5, "permanent"),
    COMMENT((short)6, "comment");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EMP_ID
          return EMP_ID;
        case 2: // NAME
          return NAME;
        case 3: // OP
          return OP;
        case 4: // DOB
          return DOB;
        case 5: // PERMANENT
          return PERMANENT;
        case 6: // COMMENT
          return COMMENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EMPID_ISSET_ID = 0;
  private static final int __PERMANENT_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);
  private _Fields optionals[] = {_Fields.COMMENT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EMP_ID, new org.apache.thrift.meta_data.FieldMetaData("empId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OP, new org.apache.thrift.meta_data.FieldMetaData("op", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, GRADE.class)));
    tmpMap.put(_Fields.DOB, new org.apache.thrift.meta_data.FieldMetaData("dob", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERMANENT, new org.apache.thrift.meta_data.FieldMetaData("permanent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Employee.class, metaDataMap);
  }

  public Employee() {
    this.empId = -1;

  }

  public Employee(
    int empId,
    String name,
    GRADE op,
    String dob,
    boolean permanent)
  {
    this();
    this.empId = empId;
    setEmpIdIsSet(true);
    this.name = name;
    this.op = op;
    this.dob = dob;
    this.permanent = permanent;
    setPermanentIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Employee(Employee other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.empId = other.empId;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetOp()) {
      this.op = other.op;
    }
    if (other.isSetDob()) {
      this.dob = other.dob;
    }
    this.permanent = other.permanent;
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
  }

  public Employee deepCopy() {
    return new Employee(this);
  }

  @Override
  public void clear() {
    this.empId = -1;

    this.name = null;
    this.op = null;
    this.dob = null;
    setPermanentIsSet(false);
    this.permanent = false;
    this.comment = null;
  }

  public int getEmpId() {
    return this.empId;
  }

  public Employee setEmpId(int empId) {
    this.empId = empId;
    setEmpIdIsSet(true);
    return this;
  }

  public void unsetEmpId() {
    __isset_bit_vector.clear(__EMPID_ISSET_ID);
  }

  /** Returns true if field empId is set (has been assigned a value) and false otherwise */
  public boolean isSetEmpId() {
    return __isset_bit_vector.get(__EMPID_ISSET_ID);
  }

  public void setEmpIdIsSet(boolean value) {
    __isset_bit_vector.set(__EMPID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public Employee setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 
   * @see GRADE
   */
  public GRADE getOp() {
    return this.op;
  }

  /**
   * 
   * @see GRADE
   */
  public Employee setOp(GRADE op) {
    this.op = op;
    return this;
  }

  public void unsetOp() {
    this.op = null;
  }

  /** Returns true if field op is set (has been assigned a value) and false otherwise */
  public boolean isSetOp() {
    return this.op != null;
  }

  public void setOpIsSet(boolean value) {
    if (!value) {
      this.op = null;
    }
  }

  public String getDob() {
    return this.dob;
  }

  public Employee setDob(String dob) {
    this.dob = dob;
    return this;
  }

  public void unsetDob() {
    this.dob = null;
  }

  /** Returns true if field dob is set (has been assigned a value) and false otherwise */
  public boolean isSetDob() {
    return this.dob != null;
  }

  public void setDobIsSet(boolean value) {
    if (!value) {
      this.dob = null;
    }
  }

  public boolean isPermanent() {
    return this.permanent;
  }

  public Employee setPermanent(boolean permanent) {
    this.permanent = permanent;
    setPermanentIsSet(true);
    return this;
  }

  public void unsetPermanent() {
    __isset_bit_vector.clear(__PERMANENT_ISSET_ID);
  }

  /** Returns true if field permanent is set (has been assigned a value) and false otherwise */
  public boolean isSetPermanent() {
    return __isset_bit_vector.get(__PERMANENT_ISSET_ID);
  }

  public void setPermanentIsSet(boolean value) {
    __isset_bit_vector.set(__PERMANENT_ISSET_ID, value);
  }

  public String getComment() {
    return this.comment;
  }

  public Employee setComment(String comment) {
    this.comment = comment;
    return this;
  }

  public void unsetComment() {
    this.comment = null;
  }

  /** Returns true if field comment is set (has been assigned a value) and false otherwise */
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EMP_ID:
      if (value == null) {
        unsetEmpId();
      } else {
        setEmpId((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case OP:
      if (value == null) {
        unsetOp();
      } else {
        setOp((GRADE)value);
      }
      break;

    case DOB:
      if (value == null) {
        unsetDob();
      } else {
        setDob((String)value);
      }
      break;

    case PERMANENT:
      if (value == null) {
        unsetPermanent();
      } else {
        setPermanent((Boolean)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EMP_ID:
      return Integer.valueOf(getEmpId());

    case NAME:
      return getName();

    case OP:
      return getOp();

    case DOB:
      return getDob();

    case PERMANENT:
      return Boolean.valueOf(isPermanent());

    case COMMENT:
      return getComment();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EMP_ID:
      return isSetEmpId();
    case NAME:
      return isSetName();
    case OP:
      return isSetOp();
    case DOB:
      return isSetDob();
    case PERMANENT:
      return isSetPermanent();
    case COMMENT:
      return isSetComment();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Employee)
      return this.equals((Employee)that);
    return false;
  }

  public boolean equals(Employee that) {
    if (that == null)
      return false;

    boolean this_present_empId = true;
    boolean that_present_empId = true;
    if (this_present_empId || that_present_empId) {
      if (!(this_present_empId && that_present_empId))
        return false;
      if (this.empId != that.empId)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_op = true && this.isSetOp();
    boolean that_present_op = true && that.isSetOp();
    if (this_present_op || that_present_op) {
      if (!(this_present_op && that_present_op))
        return false;
      if (!this.op.equals(that.op))
        return false;
    }

    boolean this_present_dob = true && this.isSetDob();
    boolean that_present_dob = true && that.isSetDob();
    if (this_present_dob || that_present_dob) {
      if (!(this_present_dob && that_present_dob))
        return false;
      if (!this.dob.equals(that.dob))
        return false;
    }

    boolean this_present_permanent = true;
    boolean that_present_permanent = true;
    if (this_present_permanent || that_present_permanent) {
      if (!(this_present_permanent && that_present_permanent))
        return false;
      if (this.permanent != that.permanent)
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Employee other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Employee typedOther = (Employee)other;

    lastComparison = Boolean.valueOf(isSetEmpId()).compareTo(typedOther.isSetEmpId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmpId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.empId, typedOther.empId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOp()).compareTo(typedOther.isSetOp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.op, typedOther.op);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDob()).compareTo(typedOther.isSetDob());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDob()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dob, typedOther.dob);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPermanent()).compareTo(typedOther.isSetPermanent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPermanent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.permanent, typedOther.permanent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComment()).compareTo(typedOther.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, typedOther.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Employee(");
    boolean first = true;

    sb.append("empId:");
    sb.append(this.empId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("op:");
    if (this.op == null) {
      sb.append("null");
    } else {
      sb.append(this.op);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dob:");
    if (this.dob == null) {
      sb.append("null");
    } else {
      sb.append(this.dob);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("permanent:");
    sb.append(this.permanent);
    first = false;
    if (isSetComment()) {
      if (!first) sb.append(", ");
      sb.append("comment:");
      if (this.comment == null) {
        sb.append("null");
      } else {
        sb.append(this.comment);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EmployeeStandardSchemeFactory implements SchemeFactory {
    public EmployeeStandardScheme getScheme() {
      return new EmployeeStandardScheme();
    }
  }

  private static class EmployeeStandardScheme extends StandardScheme<Employee> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Employee struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EMP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.empId = iprot.readI32();
              struct.setEmpIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.op = GRADE.findByValue(iprot.readI32());
              struct.setOpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DOB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dob = iprot.readString();
              struct.setDobIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PERMANENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.permanent = iprot.readBool();
              struct.setPermanentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comment = iprot.readString();
              struct.setCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Employee struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(EMP_ID_FIELD_DESC);
      oprot.writeI32(struct.empId);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.op != null) {
        oprot.writeFieldBegin(OP_FIELD_DESC);
        oprot.writeI32(struct.op.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.dob != null) {
        oprot.writeFieldBegin(DOB_FIELD_DESC);
        oprot.writeString(struct.dob);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PERMANENT_FIELD_DESC);
      oprot.writeBool(struct.permanent);
      oprot.writeFieldEnd();
      if (struct.comment != null) {
        if (struct.isSetComment()) {
          oprot.writeFieldBegin(COMMENT_FIELD_DESC);
          oprot.writeString(struct.comment);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EmployeeTupleSchemeFactory implements SchemeFactory {
    public EmployeeTupleScheme getScheme() {
      return new EmployeeTupleScheme();
    }
  }

  private static class EmployeeTupleScheme extends TupleScheme<Employee> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Employee struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetEmpId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetOp()) {
        optionals.set(2);
      }
      if (struct.isSetDob()) {
        optionals.set(3);
      }
      if (struct.isSetPermanent()) {
        optionals.set(4);
      }
      if (struct.isSetComment()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetEmpId()) {
        oprot.writeI32(struct.empId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetOp()) {
        oprot.writeI32(struct.op.getValue());
      }
      if (struct.isSetDob()) {
        oprot.writeString(struct.dob);
      }
      if (struct.isSetPermanent()) {
        oprot.writeBool(struct.permanent);
      }
      if (struct.isSetComment()) {
        oprot.writeString(struct.comment);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Employee struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.empId = iprot.readI32();
        struct.setEmpIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.op = GRADE.findByValue(iprot.readI32());
        struct.setOpIsSet(true);
      }
      if (incoming.get(3)) {
        struct.dob = iprot.readString();
        struct.setDobIsSet(true);
      }
      if (incoming.get(4)) {
        struct.permanent = iprot.readBool();
        struct.setPermanentIsSet(true);
      }
      if (incoming.get(5)) {
        struct.comment = iprot.readString();
        struct.setCommentIsSet(true);
      }
    }
  }

}

